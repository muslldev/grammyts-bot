import "jsr:@std/dotenv/load";
import {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
  Context,
} from "https://deno.land/x/grammy@v1.34.1/mod.ts";
import {
  hydrate,
  HydrateFlavor,
} from "https://deno.land/x/grammy_hydrate@v1.4.1/mod.ts";

type MyContext = HydrateFlavor<Context>;

const bot = new Bot<MyContext>(Deno.env.get("BOT_TOKEN"));
bot.use(hydrate());

bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
  },
  {
    command: "get_id",
    description: "–ü–æ–ª—É—á–∏—Ç—å ID",
  },
  {
    command: "share",
    description: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ–º-—Ç–æ",
  },
  {
    command: "menu",
    description: "–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é",
  },
]);

bot.command("start", async ctx => {
  await ctx.react("ü§ù");
  await ctx.reply("Hello, I'm bot");
});

bot.command("share", async ctx => {
  const sharekeyboard = new Keyboard()
    .requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è")
    .requestContact("–ö–æ–Ω—Ç–∞–∫—Ç")
    .requestPoll("–û–ø—Ä–æ—Å")
    .resized()
    .placeholder("–£–∫–∞–∂–∏ —á–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è");
  await ctx.reply("–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?", {
    reply_markup: sharekeyboard,
  });
});

const menuKeyboard = new InlineKeyboard()
  .text("–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "order_status")
  .row()
  .text("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "support");

const backKeyboard = new InlineKeyboard().text("<–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back");

bot.command("menu", async ctx => {
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
    reply_markup: menuKeyboard,
  });
});

bot.callbackQuery("order_status", async ctx => {
  await ctx.callbackQuery.message?.editText("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ø—É—Ç–∏", {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("support", async ctx => {
  await ctx.callbackQuery.message?.editText("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å", {
    reply_markup: backKeyboard,
  });
});

bot.callbackQuery("back", async ctx => {
  await ctx.callbackQuery.message?.editText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
    reply_markup: menuKeyboard,
  });
});

bot.on(
  ":contact",
  async ctx =>
    await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç", {
      reply_markup: { remove_keyboard: true },
    })
);
bot.on(
  ":location",
  async ctx =>
    await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", {
      reply_markup: { remove_keyboard: true },
    })
);

bot.command("get_id", async ctx => await ctx.reply(`–í–∞—à ID: ${ctx.from?.id}`));

bot.catch(err => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

bot.start();
